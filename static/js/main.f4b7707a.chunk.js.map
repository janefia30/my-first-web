{"version":3,"sources":["image2.png","chevron-down.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","style","Background","overlay","container","test","alignSelf","marginTop","color","fontSize","maxWidth","w","textAlign","display","backgroundColor","borderRadius","marginRight","type","name","placeholder","padding","width","borderStyle","onClick","alert","maxwidth","alt","src","Chevron","height","Component","window","innerWidth","h","innerHeight","backgroundImage","concat","backgroundPosition","backgroundRepeat","backgroundSize","flexDirection","borderWidth","justifyContent","fontWeight","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sPCKlCC,mLAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAOA,EAAMC,YAChBJ,EAAAC,EAAAC,cAAA,OAAKC,MAAOA,EAAME,SAChBL,EAAAC,EAAAC,cAAA,OAAKC,MAAOA,EAAMG,WAChBN,EAAAC,EAAAC,cAAA,OAAKC,MAAOA,EAAMI,MAAlB,QACAP,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEK,UAAW,SAAUC,UAAW,GAAIC,MAAO,QAASC,SAAU,GAAIC,SAAWC,EAAI,EAAIC,UAAW,WAA9G,+CACAd,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEY,QAAS,OAAQP,UAAW,SAAUC,UAAW,KAC3DT,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEY,QAAS,OAAQC,gBAAiB,OAAQC,aAAc,GAAIC,YAAa,KACrFlB,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,OAAOC,KAAK,OAAOC,YAAY,kBAAkBlB,MAAO,CAAEmB,QAAS,GAAIC,MAAO,IAAKC,YAAa,OAAQb,SAAU,OAEhIX,EAAAC,EAAAC,cAAA,OAAKuB,QAAS,kBAAMC,MAAM,YAAYvB,MAAO,CAAEY,QAAS,OAAQC,gBAAiB,UAAWM,QAAS,EAAGZ,MAAO,OAAQO,aAAc,KAArI,qBAIFjB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEY,QAAS,OAAQP,UAAW,SAAUC,UAAW,KAC7DT,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEO,MAAO,OAAQiB,SAAU,IAAKb,UAAW,WAArD,4BACAd,EAAAC,EAAAC,cAAA,OAAK0B,IAAI,UAAUzB,MAAO,CAAEK,UAAW,UAAaqB,IAAKC,IAASC,OAAO,KAAKR,MAAM,mBAlBlFS,aA2BdnB,EAAIoB,OAAOC,WACXC,EAAIF,OAAOG,YACTjC,EAAQ,CACZC,WAAY,CACVW,QAAS,OACTsB,gBAAe,OAAAC,OAASlC,IAAT,KACf2B,OAAQ,MACRQ,mBAAoB,SACpBC,iBAAkB,YAClBC,eAAgB,SAElBpC,QAAS,CACPW,gBAAiB,qBACjBe,OAAQI,EACRZ,MAAOV,GAETP,UAAW,CACTS,QAAS,OACT2B,cAAe,UAEjBnC,KAAM,CACJC,UAAW,SACXC,UAAW,GACXe,YAAa,QACbmB,YAAa,EACb/B,SAAU,GACVF,MAAO,OACPkC,eAAgB,SAChBtB,QAAS,GACTuB,WAAY,SAID9C,ICrDK+C,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f4b7707a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image2.3a53f3dc.png\";","module.exports = __webpack_public_path__ + \"static/media/chevron-down.7768ba49.png\";","import React, { Component } from 'react';\nimport Background from './image2.png';\nimport Chevron from './chevron-down.png';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={style.Background}>\n        <div style={style.overlay}>\n          <div style={style.container}>\n            <div style={style.test}>jane</div>\n            <div style={{ alignSelf: 'center', marginTop: 50, color: 'white', fontSize: 36, maxWidth: (w / 2), textAlign: 'center' }}>The Most Simple & Yes powerful Way to launch\n            <div style={{ display: 'flex', alignSelf: 'center', marginTop: 60 }}>\n                <div style={{ display: 'flex', backgroundColor: '#fff', borderRadius: 10, marginRight: 16 }}>\n                  <input type=\"text\" name=\"name\" placeholder=\"Enter Your name\" style={{ padding: 16, width: 300, borderStyle: 'none', fontSize: 14 }}></input>\n                </div>\n                <div onClick={() => alert('Clicked')} style={{ display: 'flex', backgroundColor: '#2CA64E', padding: 7, color: '#fff', borderRadius: 10 }}>\n                  GET EARLY ACCESS\n                </div>\n              </div>\n              <div style={{ display: 'flex', alignSelf: 'center', marginTop: 60 }}>\n                <p style={{ color: '#fff', maxwidth: 100, textAlign: 'center' }}> Scroll Down to explorer</p>\n                <img alt='Chevron' style={{ alignSelf: 'center', }} src={Chevron} height=\"24\" width=\"24\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\nlet w = window.innerWidth;\nlet h = window.innerHeight;\nconst style = {\n  Background: {\n    display: 'flex',\n    backgroundImage: `url(${Background})`,\n    height: '100',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover'\n  },\n  overlay: {\n    backgroundColor: \"rgba(81,77,67,8,8)\",\n    height: h,\n    width: w\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  test: {\n    alignSelf: 'center',\n    marginTop: 50,\n    borderStyle: 'solid',\n    borderWidth: 5,\n    maxWidth: 50,\n    color: '#fff',\n    justifyContent: 'center',\n    padding: 10,\n    fontWeight: 'bold'\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}